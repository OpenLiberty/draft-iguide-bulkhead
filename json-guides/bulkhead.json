{
    "name": "Bulkhead",
    "title": "Bulkhead",
    "description": "Learn how to use the MicroProfile Bulkhead policy to prevent cascading failures.",
    "duration": "25 minutes",
    "audience": "developer",
    "repo": "https://github.com/OpenLiberty/draft-iguide-bulkhead",
    "steps": [
        {
            "name": "Intro",
            "title": "What you'll learn",
            "guide_duration" : "25 minutes",
            "description": [
                "Explore how to prevent a single failure from bringing down the entire system. MicroProfile makes it easy to do this with the Bulkhead policy in its Fault Tolerance feature."
            ],
            "sections" : [
                {
                    "name": "backgroundConcepts",
                    "title": "Background concepts",
                    "description": [
                        "We will use the MicroProfile <b>Bulkhead</b> and <b>Asynchronous</b> policies.<br>",
                        "<h4>Bulkhead</h4>",
                        "The term <b>bulkhead</b> comes from the structure used in ships to create partitions. In the event of a hull breach, these partitions can be sealed off to prevent the rest of the ship from getting damaged.<br>",
                        "The bulkhead pattern in software systems work similarly by isolating failures to allow the rest of the system to continue functioning.<br>",
                        "<h4>Asynchronous</h4>",
                        "Asynchronous definition?"
                    ]
                }
            ]
        },
        {
            "name": "ExampleScenario",
            "title": "Example: Bank Scenario",
            "description": [],
            "content": [],
            "sections": [
                {
                    "name": "FinancialAdvisor",
                    "title": "Request financial advsior",
                    "description": [
                        "Image that you're developing a VirtualFinancialAdvisor microservice for a bank to allow online chat with an available financial advisor. The micorservice will allow only one working financial advisor chat at a time. As you progress through the guide, you could see how the number of available chat session impacts the service and the system.",
                        "Visit your bank's website to request a financial advisor</br"
                    ],
                    "instruction": [
                        "Enter the following URL into the browser that follows, or click <action></action>"
                    ],
                    "content":[
                        {
                            "displayType":"webBrowser",
                            "url": "",
                            "browserContent": "",
                            "callback": ""
                        },
                        {
                            "displayType":"pod"
                        }
                    ]
                }
            ]            
        },
        {
            "name": "AsyncWithoutBulkhead",
            "title": "Java Concurrency with Future and Executors",
            "description": [
                "In the <a href='#example-bank-scenario'>Example: Bank Scenario</a> step, it allows only a single virtual financial advisor chat session available at a time. Implementing Java concurrency by using <a href='#background-concepts'>Executors and Future</a> removes the single chat limitation and allows multiple virtual financial advisor chat sessions available at the same time."
            ],
            "instruction": [
                "Change the <code>return serviceforVFA();</code> on line 10 to the following code, or click <br><action title='Adding Java Concurrency' onclick=\"bulkheadCallBack.addJavaConcurrencyButton(event, 'AsyncWithoutBulkhead')\"><b>ExecutorService executor = Executors.newFixedThreadPool(1);\nFuture serviceRequest = executor.submit(() -> {\n  return serviceForVFA();\n});</b></action>.<br>Then, click <action title='Run' onclick=\"bulkheadCallBack.saveButtonEditorButton(event, 'AsyncWithoutBulkhead')\"><b>Run</b></action> on the editor menu pane.",
                "Click <action title='Chat with a financial advisor' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncWithoutBulkhead')\"><b>Chat with a financial advisor</b></action> to open a chat session with an available advisor.<br>",
                "Click <action title='Chat with a financial advisor' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncWithoutBulkhead')\"><b>Chat with a financial advisor</b></action> the 2nd time to open another chat session with another available advisor.<br>",
                "Click <action title='Chat with a financial advisor' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncWithoutBulkhead')\"><b>Chat with a financial advisor</b></action> the 3rd time to open another chat session with another available advisor.<br>",
                "Since the new codes do not implement a limit to the number of available advisor sessions, the system eventually runs out of CPU or memory resources causing it to overload.<br>Click <action title='Chat with a financial advisor 100 times' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncWithoutBulkhead')\"><b>Chat with a financial advisor 100 times</b></action> to see the failure to open a chat session.<br>"
            ],
            "content":[
                {
                    "displayType": "tabbedEditor",
                    "editorList": [
                        {
                            "displayType":"fileEditor",
                            "fileName": "BankService.java",
                            "preload": [
                                "package io.openliberty.guides.bulkhead.global.eBank.microservices;",
                                "import java.util.concurrent.Future;",
                                "import java.util.concurrent.Executors;",
                                "import java.util.concurrent.ExecutorService;",
                                "",
                                "public class BankService {",
                                "",
                                "  // VFA = Virtual Financial Advisor",
                                "  public Service requestForVFA() {",
                                "    counterForVirtualFinancialAdvisor++;",
                                "    return serviceForVFG();",
                                "  }",
                                "}"
                            ],
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "10"
                                },
                                {
                                    "from": "12",
                                    "to": "13"
                                }
                            ],
                            "save": false,
                            "callback": "(function test(editor) {bulkheadCallBack.listenToEditorForJavaConcurrency(editor); })"
                        }
                    ]
                },
                {
                    "displayType": "pod"
                }
            ]
        },
        {
            "name": "EnableBulkhead",
            "title": "Enabling MicroProfile Fault Tolerance",
            "description": [
                "Begin by enabling the MicroProfile Fault Tolerance 1.0 feature in your <code>server.xml</code> file. This feature allows you to use the Bulkhead and Asynchronous policy."
            ],
            "instruction": [
            ],
            "content": [
            ]
        },
        {
            "name": "AddingBulkheadAnnotation",
            "title": "Adding the @Bulkhead annotation",
            "description": [ 
                "Semaphore style Bulkhead"         
            ],
            "instruction": [
            ],
            "content": [
            ]
        },
        {
            "name": "AddingAsyncAnnotation",
            "title": "Adding the @Asynchronous annotation",
            "description": [  
                "Thread pool style Bulkhead"        
            ],
            "instruction": [
            ],
            "content": [
            ]
        },
        {   "name": "playground",
            "title": "Interactive bulkhead playground",
            "description": [
              "Now that you learned about bulkhead, you can explore the parameters in the <code>@Bulkhead</code> annotation and see the bulkhead in action.",
              "<br>You learned about the following parameters:",
              "<ul>",
              "<li><b>value</b>: ",
              "<li><b>waitingTaskQueue</b>: ",
              "</ul>"
            ]
        },
        {
            "name": "Fallback",
            "title": "Requesting financial advisor with fallback",
            "description": [               
            ]
        },
        {
            "name": "WhatNext",
            "title": "Great work!  You're done!",
            "description": [
                
            ]
        }

    ]
}
