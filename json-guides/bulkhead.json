{
    "name": "Bulkhead",
    "title": "Bulkhead",
    "description": "Learn how to use the MicroProfile Bulkhead policy to prevent cascading failures.",
    "duration": "25 minutes",
    "audience": "developer",
    "repo": "https://github.com/OpenLiberty/draft-iguide-bulkhead",
    "steps": [
        {
            "name": "Intro",
            "title": "What you'll learn",
            "guide_duration" : "25 minutes",
            "description": [
                "Explore how to prevent a single failure from bringing down the entire system. MicroProfile makes this easy to do with its Fault Tolerance feature's Bulkhead policy.<br>",
                "You'll start with a sample online banking scenario and see how it fails when no fault tolerance is implenented. You'll then enable the MicroProfile Fault Tolerance feature and use the Bulkhead policy to prevent the failing method from taking down the whole application. You will explore the two approaches to Bulkhead, semaphore isolation and thread pool isolation, and the parameters used for the annotation. Finally, you will add a fallback class which will be invoked if the BulkheadException is thrown."
            ],
            "sections" : [
                {
                    "name": "backgroundConcepts",
                    "title": "Background concepts",
                    "description": [
                        "We will use the MicroProfile <b>Bulkhead</b> and <b>Asynchronous</b> policies.<br>",
                        "<h4>Bulkhead</h4>",
                        "The term <b>bulkhead</b> comes from the structure used in ships to create partitions. In the event of a hull breach, these partitions can be sealed off to prevent the rest of the ship from getting damaged.<br>",
                        "The bulkhead pattern in software systems work similarly by isolating failures to prevent the rest of the system from failing.<br>",
                        "<h4>Asynchronous</h4>",
                        "Asynchronous means the execution of the client request will be on a separate thread."
                    ]
                }
            ]
        },
        {
            "name": "ExampleScenario",
            "title": "Example: Bank Scenario",
            "description": [
                "Image that you're developing a VirtualFinancialAdvisor microservice for a bank to allow online chat with an available financial advisor. The initial implementation of the micorservice allows only one financial advisor chat at a time. As you progress through the guide, you could see how the number of available chat session impacts the service and the system."
            ],
            "content": [],
            "sections": [
                {
                    "name": "FinancialAdvisor",
                    "title": "Request financial advsior",
                    "description": [
                        "Begin by requesting an online chat with a financial advisor in the bank."
                    ],
                    "instruction": [
                        "Click <action title='Chat with a financial advisor' onclick=\"bulkheadCallBack.clickChat(event, 'FinancialAdvisor')\"><b>Chat with a financial advisor</b></action> to open a chat session with an available advisor.<br>",
                        "Since the microservice allows only one active chat session, the next chat session request will not be allowed.<br>Click <action title='Chat with a financial advisor the second time' onclick=\"bulkheadCallBack.clickChat(event, 'FinancialAdvisor')\"><b>Chat with a financial advisor</b></action> the 2nd time to see the failure to open a chat session.<br>"
                    ],
                    "content":[
                        {
                            "displayType":"pod",
                            "content": "/guides/draft-iguide-bulkhead/html/virtual-financial-advisor-example-scenario.html"
                        }
                    ]
                }
            ]            
        },
        {
            "name": "AsyncWithoutBulkhead",
            "title": "Java Concurrency with Future and Executors",
            "description": [
                "In the <a href='#example-bank-scenario'>Example: Bank Scenario</a> step, it allows only a single virtual financial advisor chat session available at a time. Implementing Java concurrency by using <a href='#background-concepts'>Executors and Future</a> removes the single chat limitation and allows multiple virtual financial advisor chat sessions available at the same time."
            ],
            "instruction": [
                "Change the <code>return serviceforVFA();</code> on line 10 to the following code, or click <br><action title='Adding Java Concurrency' onclick=\"bulkheadCallBack.addJavaConcurrencyButton(event, 'AsyncWithoutBulkhead')\"><b>ExecutorService executor = Executors.newFixedThreadPool(1);\nFuture serviceRequest = executor.submit(() -> {\n  try{\n    return serviceForVFA();\n  } catch {Exception ex} {\n    handleBulkheadException()\n  }\n  return null;\n});</b></action>.<br>Then, click <action title='Run' onclick=\"bulkheadCallBack.saveButtonEditorButton(event, 'AsyncWithoutBulkhead')\"><b>Run</b></action> on the editor menu pane.",
                "Click <action title='Chat with a financial advisor' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncWithoutBulkhead')\"><b>Chat with a financial advisor</b></action> to open a chat session with an available advisor.<br>",
                "Click <action title='Chat with a financial advisor' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncWithoutBulkhead')\"><b>Chat with a financial advisor</b></action> the 2nd time to open another chat session with another available advisor.<br>",
                "Click <action title='Chat with a financial advisor' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncWithoutBulkhead')\"><b>Chat with a financial advisor</b></action> the 3rd time to open another chat session with another available advisor.<br>",
                "Since the new codes do not implement a limit to the number of available advisor sessions, the system eventually runs out of CPU or memory resources causing it to overload.<br>Click <action title='Chat with a financial advisor 100 times' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncWithoutBulkhead')\"><b>Chat with a financial advisor 100 times</b></action> to see the failure to open a chat session.<br>"
            ],
            "content":[
                {
                    "displayType": "tabbedEditor",
                    "editorList": [
                        {
                            "displayType":"fileEditor",
                            "fileName": "BankService.java",
                            "preload": [
                                "package io.openliberty.guides.bulkhead.global.eBank.microservices;",
                                "import java.util.concurrent.Future;",
                                "import java.util.concurrent.Executors;",
                                "import java.util.concurrent.ExecutorService;",
                                "",
                                "public class BankService {",
                                "",
                                "  // VFA = Virtual Financial Advisor",
                                "  public Service requestForVFA() {",
                                "    counterForVFA++;",
                                "    return serviceForVFA(counterForVFA);",
                                "  }",
                                "",
                                "  private Service serviceForVFA(int counterForVFA) {",
                                "    Service chatService = new ChatSession(counterForVFA);",
                                "    return chatService;",
                                "  }",
                                "}"
                            ],
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "10"
                                },
                                {
                                    "from": "12",
                                    "to": "18"
                                }
                            ],
                            "save": false,
                            "callback": "(function test(editor) {bulkheadCallBack.listenToEditorForJavaConcurrency(editor); })"
                        }
                    ]
                },
                {
                    "displayType": "pod"
                }
            ]
        },
        {
            "name": "AddLibertyMPFaultTolerance",
            "title": "Enabling MicroProfile Fault Tolerance",
            "description": [
                "Microprofile fault tolerance is a way for microservices to handle the unavailability of a service by using different policies to guide the execution and result of some logic.  The MicroProfile Fault Tolerance 1.0 feature provides an environment to support resilient microservices through patterns that include bulkheads.  Enable the MicroProfile Fault Tolerance 1.0 feature in the <code>server.xml</code> of the Liberty server where the Virtual Financial Advisor microservice runs."
            ],
            "instruction": [
              "Add the following element declaration inside the featureManager element to the <code>server.xml</code> file, or click <action title='Enable MicroProfile Fault Tolerance' onclick=\"bulkheadCallBack.addMicroProfileFaultToleranceFeatureButton(event)\"><b>&lt;feature>mpFaultTolerance-1.0&lt;/feature&gt;</b></action>. Then, click <action title='Save' onclick=\"bulkheadCallBack.saveServerXMLButton(event)\"><b>Save</b></action> on the editor menu pane."
            ],
            "content": [
              {
                "displayType": "fileEditor",
                "fileName": "server.xml",
                "preload": [
                  "<?xml version=\"1.0\"?>",
                  "<server description=\"Sample Liberty server\">",
                  "   <featureManager>",
                  "      <feature>cdi-1.2</feature>",
                  "   </featureManager>",
                  "   <httpEndpoint host=\"*\" id=\"defaultHttpEndpoint\" httpsPort=\"${default.https.port}\" httpPort=\"{default.http.port}\"/>",
                  "</server>"
                ],
                "save": true,
                "readonly": [
                    {
                        "from": "1",
                        "to": "3"
                    },
                    {
                        "from": "5",
                        "to": "7"
                    }
                ],
                "callback": "(function test(editor) {bulkheadCallBack.listenToEditorForFeatureInServerXML(editor); })"
              }
            ]
        } ,
        {
            "name": "BulkheadAnnotation",
            "title": "Adding the @Bulkhead annotation",
            "description": [ 
                "Now that you've seen how our application can easily fail when overloaded, we will fix that by using the Bulkhead pattern. Add the @Bulkhead annotation to the requestAVirtualFinancialAdvisor microservice to limit the maximum concurrent requests.<br>",
                "When <code>@Bulkhead</code> is used by itself, the semaphore approach to bulkhead will be used. When reaching the maximum concurrent request count, extra requests will fail with <code>BulkheadException</code>.<br>", 
                "You may specify the maximum number of concurrent requests using the <code>value</code> parameter, or by just passing the number into the annotation. If a value is not specified, the annotation defaults to 10 requests."
            ],
            "instruction": [
                "Add the <code>@Bulkhead</code> annotation with a value of 2 on line 7, before the requestAVirtualFinancialAdvisor method, or click <action title='Add @Bulkhead' onclick=\"bulkheadCallBack.addBulkheadButton(event, 'BulkheadAnnotation')\">@Bulkhead(2)</action>. Then, click <action title='Run' onclick=\"bulkheadCallBack.saveButtonEditorButton(event, 'BulkheadAnnotation')\"><b>Run</b></action> on the editor menu pane.",
                "Click <action title='Chat with a financial advisor' onclick=\"bulkheadCallBack.clickChat(event, 'BulkheadAnnotation')\"><b>Chat with a financial advisor</b></action> to open a chat session with an available advisor.<br>",
                "Click <action title='Chat with a financial advisor' onclick=\"bulkheadCallBack.clickChat(event, 'BulkheadAnnotation')\"><b>Chat with a financial advisor</b></action> the 2nd time to open another chat session with another available advisor.<br>",
                "Click <action title='Chat with a financial advisor' onclick=\"bulkheadCallBack.clickChat(event, 'BulkheadAnnotation')\"><b>Chat with a financial advisor</b></action> the 3rd time to open another chat session with another available advisor.<br>"
            ],
            "content": [
                {
                    "displayType": "tabbedEditor",
                    "editorList": [
                        {
                            "displayType": "tabbedEditor",
                            "fileName": "BankService.java",
                            "preload": [
                                "package global.eBank.microservices;",
                                "import java.util.concurrent.Future;",
                                "import java.util.concurrent.Executors;",
                                "import java.util.concurrent.ExecutorService;",
                                "",
                                "public class BankService {",
                                "",
                                "    public Service serviceForVFA(counterForVFA) {",
                                "        Service chatService = new ChatSession(counterForVFA)",
                                "        return chatService;",
                                "    }",
                                "}"
                            ],
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "6"
                                },
                                {
                                    "from": "8",
                                    "to": "15"
                                }
                            ],
                            "save": false,
                            "callback": "(function test(tabbedEditor) {bulkheadCallBack.listenToEditorForJavaConcurrency(tabbedEditor, 'BankService.java'); })"
                        }
                    ]
                },
                {
                    "displayType": "pod"
                }   
            ]
        },
        {
            "name": "AsyncBulkheadAnnotation",
            "title": "Adding the @Asynchronous annotation with Bulkhead",
            "description": [ 
                "When <code>@Bulkhead</code> is used with <code>@Asynchronous</code>, the thread pool isolation approach will be used. The thread pool approach allows to configure the maximum concurrent requests together with the waiting queue size. When a request cannot be added to the waiting queue, <code>BulkheadException</code> will be thrown.</br>",
                "The waiting queue can be configure using <b>waitTaskQueue</b> parameter of the <code>@Bulkhead</code> annotation. By default the maximum number of requests on the waiting queue is 10. This value only takes effect on asynchronous invocation by using <code>@Asynchronous</code> annotation.<br>", 
                "In the previous <a href='#adding-the-bulkhead-annotation'>Adding the@Bulkhead annotation</a> step, once requests reach the maximum limit, the extra request still fail. Using <code>@Asynchronous</code> annotation allows the extra requests to be place in the waiting queue. When a request cannot be added to the waiting queue, a friendly message will be display for the user to try the request again later. <br>"         
            ],
            "instruction": [
                "Change the <code>@Bulkhead()</code> annotation on line 9 to the following code, or click <br><action title='Bulkhead annotation with Asynchronous' onclick=\"bulkheadCallBack.addAsyncBulkheadButton(event, 'AsyncBulkheadAnnotation')\"><b>@Asynchronous\n@Bulkhead(value = 2, waitingTaskQueue = 1)</b></action>.<br>The method annotated with @Asynchronous must return a Future. Change the method return type on line 12 to the following code, or click <br><action title='Bulkhead return type method' onclick=\"bulkheadCallBack.addMethodFutureReturnTypeButton(event, 'AsyncBulkheadAnnotation')\"><b>public Future<Service> requestAVirtualFinancialAdvisor() {</b></action>.<br>Change the return type on line 14 to the following code, or click<br><action title='Bulkhead return type' onclick=\"bulkheadCallBack.addReturnTypeButton(event, 'AsyncBulkheadAnnotation')\"><b>return CompletableFuture.completedFuture(virtualFinancialAdvisorService());</b></action>.<br>Then, click <action title='Run' onclick=\"bulkheadCallBack.saveButtonEditorButton(event, 'AsyncBulkheadAnnotation')\"><b>Run</b></action> on the editor menu pane.",
                "In the previous step, after the maximum number of requests has reach, the extra request fails. Retry the 3rd request by clicking <action title='Chat with a financial advisor' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncBulkheadAnnotation')\"><b>Chat with a financial advisor</b></action> to be place in the waiting queue.<br>",
                "Once the extra request can not be add to the waiting queue, a message will be display. Click <action title='Chat with a financial advisor' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncBulkheadAnnotation')\"><b>Chat with a financial advisor</b></action> the 4th time to see the message display to the user.<br>"
            ],
            "content":[
                {
                    "displayType":"tabbedEditor",
                    "activeTab": "BankService.java",
                    "editorList": [
                        {
                            "displayType":"fileEditor",
                            "fileName": "BankService.java",
                            "preload": [
                                "package io.openliberty.guides.bulkhead.global.eBank.microservices;",
                                "import java.util.concurrent.Future;",
                                "import org.eclipse.microprofile.faulttolerance.Asynchronous;",
                                "import org.eclipse.microprofile.faulttolerance.Bulkhead;",
                                "import java.util.concurrent.CompletableFuture;",
                                "",
                                "public class BankService {",
                                "",
                                "  @Bulkhead(2)",
                                "  public Service requestForVFA() {",
                                "    counterForVirtualFinancialAdvisor++;",
                                "    return serviceForVFA();",
                                "  }",
                                "}"
                            ],
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "8"
                                },
                                {
                                    "from": "11",
                                    "to": "11"
                                },
                                {
                                    "from": "13",
                                    "to": "13"
                                },
                                {
                                    "from": "15",
                                    "to": "16"
                                }
                            ],
                            "save": false,
                            "callback": "(function test(editor) {bulkheadCallBack.listenToEditorForAsyncBulkhead(editor); })"
                        }
                    ]
                },
                {
                    "displayType": "pod"
                }
            ]
        },
        {   "name": "playground",
            "title": "Interactive bulkhead playground",
            "description": [
                "Now that you learned about MicroProfile Bulkhead and Asynchronous, you can explore the parameters in the <code>@Bulkhead</code> annotation and see the bulkhead in action.",
                "<br>You learned about the following parameters:",
                "<ul>",
                "<li><b>value</b>: ",
                "<li><b>waitingTaskQueue</b>: ",
                "</ul>"
            ]
        },
        {
            "name": "Fallback",
            "title": "Adding the @Fallback annotation",
            "description": [  
                "Use <code>@Fallback(FallbackHandler.class)</code> annotation to identify a method under a class that runs when the requests are failed.<br>",
                "In the previous <a href='#adding-the-asynchronous-annotation-with-bulkhead'>Adding the @Asynchronous annotation with Bulkhead</a> step, when a request can not be added to the waiting queue, a message display for the user to try again later. With <code>@Fallback(FallbackHandler.class)</code> annotation, the <code>FallbackHandler</code> class is executed to display a message for the user to schedule the request."
            ],
            "instruction": [
                "In <code>BankService.java</code> add the <code>@Fallback(ServiceFallbackHandler.class)</code> annotation on line 9 to the following code, or click <br><action title='Async Bulkhead annotation with Fallback' onclick=\"bulkheadCallBack.addFallbackAsyncBulkheadButton(event, 'Fallback')\"><b>@Fallback(ServiceFallbackHandler.class)</b></action>.<br><note>Note: When the method <code>requestForVFA()</code> failed, the fallback operation will be performed. In <code>ServiceFallBackHandler.java</code> the method <code>ServiceFallbackHandler.handle(ExecutionContext context)</code> will be invoked. The return type of <code>ServiceFallbackHandler.handle(ExecutionContext context)</code> must be <code>Service</code>. Otherwise, the <code>FaultToleranceDefinitionException</code> will be thrown.</note>Then, click <action title='Run' onclick=\"bulkheadCallBack.saveButtonEditorButton(event, 'Fallback')\"><b>Run</b></action> on the editor menu pane.",
                "Click <action title='Chat with a financial advisor' onclick=\"bulkheadCallBack.clickChat(event, 'Fallback')\"><b>Chat with a financial advisor</b></action> to see the message to schedule an appointment.<br>"
            ],
            "content":[
                {
                    "displayType":"tabbedEditor",
                    "activeTab": "BankService.java",
                    "editorList": [
                        {
                            "displayType":"fileEditor",
                            "fileName": "ServiceFallbackHandler.java",
                            "preload": [
                                "package io.openliberty.guides.bulkhead.global.eBank.microservices;",
                                "import org.eclipse.microprofile.faulttolerance.ExecutionContext;",
                                "import org.eclipse.microprofile.faulttolerance.FallbackHandler;",
                                "",
                                "public class ServiceFallbackHandler implements FallbackHandler<Service> {",
                                "",
                                "  @Override",
                                "  public Service handle(ExecutionContext context) {",
                                "    return new Service('All of our financial advisor are busy with another customer.\\nPlease click on the <button> Schedule an appointment </button> to request the service.');",
                                "  }",
                                "}"
                            ],
                            "readonly": true,
                            "save": false
                        },
                        {
                            "displayType":"fileEditor",
                            "fileName": "BankService.java",
                            "preload": [
                                "package io.openliberty.guides.bulkhead;",
                                "import java.util.concurrent.Future;",
                                "import org.eclipse.microprofile.faulttolerance.Asynchronous;",
                                "import org.eclipse.microprofile.faulttolerance.Bulkhead;",
                                "import org.eclipse.microprofile.faulttolerance.Fallback;",
                                "import java.util.concurrent.CompletableFuture;",
                                "",
                                "public class BankService {",
                                "",
                                "  @Asynchronous",
                                "  @Bulkhead(value = 2,",
                                "            waitingTaskQueue = 1)",
                                "  public Future<Service> requestForVFA() {",
                                "    counterForVFA++;",
                                "    return CompletableFuture.completedFuture(serviceForVFG());",
                                "  }",
                                "}"
                            ],
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "8"
                                },
                                {
                                    "from": "10",
                                    "to": "17"
                                }
                            ],
                            "save": false,
                            "callback": "(function test(editor) {bulkheadCallBack.listenToEditorForAsyncBulkheadFallback(editor); })"
                        }
                    ]
                },
                {
                    "displayType": "pod"
                }
            ]
        },
        {
            "name": "WhatNext",
            "title": "Great work!  You're done!",
            "description": [

            ]
        }

    ]
}
