{
    "name": "Bulkhead",
    "title": "Bulkhead",
    "description": "Learn how to use the MicroProfile Bulkhead policy to prevent cascading failures.",
    "duration": "25 minutes",
    "audience": "developer",
    "repo": "https://github.com/OpenLiberty/draft-iguide-bulkhead",
    "steps": [
        {
            "name": "Intro",
            "title": "What you'll learn",
            "guide_duration" : "25 minutes",
            "description": [
                "Explore how to prevent a single failure from bringing down the entire system. MicroProfile makes it easy to do this with the Bulkhead policy in its Fault Tolerance feature."
            ],
            "sections" : [
                {
                    "name": "backgroundConcepts",
                    "title": "Background concepts",
                    "description": [
                        "We will use the MicroProfile <b>Bulkhead</b> and <b>Asynchronous</b> policies.<br>",
                        "<h4>Bulkhead</h4>",
                        "The term <b>bulkhead</b> comes from the structure used in ships to create partitions. In the event of a hull breach, these partitions can be sealed off to prevent the rest of the ship from getting damaged.<br>",
                        "The bulkhead pattern in software systems work similarly by isolating failures to prevent the rest of the system from failing.<br>",
                        "<h4>Asynchronous</h4>",
                        "Asynchronous definition?"
                    ]
                }
            ]
        },
        {
            "name": "ExampleScenario",
            "title": "Example: Bank Scenario",
            "description": [],
            "content": [],
            "sections": [
                {
                    "name": "FinancialAdvisor",
                    "title": "Request financial advsior",
                    "description": [
                        "Visit your bank's website to request a financial advisor</br"
                    ],
                    "instruction": [
                        "Enter the following URL into the browser that follows, or click <action></action>"
                    ],
                    "content":[
                        {
                            "displayType":"webBrowser",
                            "url": "",
                            "browserContent": "",
                            "callback": ""
                        },
                        {
                            "displayType":"pod"
                        }
                    ]
                }
            ]            
        },
        {
            "name": "AsyncWithoutBulkhead",
            "title": "Java Concurrency with Future and Executors",
            "description": [
                "Adding Java concurrency such as Executors and Future, removes the limitation of one \"working\" virtual financial advisor. This allows multiple virtual financial advisors working at the same time."
            ],
            "instruction": [
                "Change the <code>return virtualFinancialAdvisorService();</code> on line 10 to the following code, or click <br><action title='Adding Java Concurrency' onclick=\"bulkheadCallBack.addJavaConcurrencyButton(event, 'AsyncWithoutBulkhead')\"><b>ExecutorService executor = Executors.newFixedThreadPool(1);\nFuture<Boolean> serviceRequest = executor.submit(() -> {\n    return virtualFinancialAdvisorService();\n});</b></action>.<br>Then, click <action title='Run' onclick=\"bulkheadCallBack.saveButtonEditorButton(event, 'AsyncWithoutBulkhead')\"><b>Run</b></action> on the editor menu pane.",
                "Click <action title='Chat with a financial advisor' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncWithoutBulkhead')\"><b>Chat with a financial advisor</b></action> to open a chat session with an available advisor.<br>",
                "Click <action title='Chat with a financial advisor' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncWithoutBulkhead')\"><b>Chat with a financial advisor</b></action> to open a second chat session with another available advisor.<br>",
                "Click <action title='Chat with a financial advisor' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncWithoutBulkhead')\"><b>Chat with a financial advisor</b></action> to open a third chat session with another available advisor.<br>",
                "Since there is no limit to the number of available advisor sessions, the system eventually overloads. Click <action title='Chat with a financial advisor' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncWithoutBulkhead')\"><b>Chat with a financial advisor</b></action> to see the failure to open a chat session.<br>"
            ],
            "content":[
                {
                  "displayType":"fileEditor",
                  "fileName": "VirtualFinancialAdvisor.java",
                  "preload": [
                      "package global.eBank.microservices;",
                      "import java.util.concurrent.Future;",
                      "import java.util.concurrent.Executors;",
                      "import java.util.concurrent.ExecutorService;",
                      "",
                      "public class BankService {",
                      "",
                      "    public Service requestAVirtualFinancialAdvisor() {",
                      "        counterForVirtualFinancialAdvisor++;",
                      "        return virtualFinancialAdvisorService();",
                      "    }",
                      "}"
                  ],
                  "readonly": [
                    {
                        "from": "1",
                        "to": "9"
                    },
                    {
                        "from": "11",
                        "to": "12"
                    }
                  ],
                  "save": false,
                  "callback": "(function test(editor) {bulkheadCallBack.listenToEditorForJavaConcurrency(editor); })"
                },
                {
                    "displayType": "pod",
                    "diffcontent": "/guides/draft-iguide-bulkhead/html/virtual-financial-advisor-new-session.html"
                  }
            ]
        },
        {
            "name": "EnableBulkhead",
            "title": "Enabling MicroProfile Fault Tolerance",
            "description": [
                "Begin by enabling the MicroProfile Fault Tolerance 1.0 feature in your <code>server.xml</code> file. This feature allows you to use the Bulkhead and Asynchronous policy."
            ],
            "instruction": [
            ],
            "content": [
            ]
        },
        {
            "name": "AddingBulkheadAnnotation",
            "title": "Adding the @Bulkhead annotation",
            "description": [ 
                "Now that you've seen how our application can easily fail when overloaded, we will fix that by using the Bulkhead pattern. Add the @Bulkhead annotation to the requestDoctor microservice to limit the maximum concurrent requests.<br>",
                "By default, the annotation limits the maximum concurrent requests to 10. Optionally, you may provide a number to customize this limit. Once this limit is reached, extra requests will fail with <code>BulkheadException</code>."
            ],
            "instruction": [
                "Add the <code>@Bulkhead</code> annotation on line x, before the requestDoctor method, or click <action>@Bulkhead</action>. Then, click <action>Save</action> on the editor menu pane."
            ],
            "content": [
            ]
        },
        {
            "name": "AddingAsyncAnnotation",
            "title": "Adding the @Asynchronous annotation",
            "description": [  
                "Thread pool style Bulkhead"        
            ],
            "instruction": [
            ],
            "content": [
            ]
        },
        {   "name": "playground",
            "title": "Interactive bulkhead playground",
            "description": [
                "Now that you learned about bulkhead, you can explore the parameters in the <code>@Bulkhead</code> annotation and see the bulkhead in action.",
                "<br>You learned about the following parameters:",
                "<ul>",
                "<li><b>value</b>: ",
                "<li><b>waitingTaskQueue</b>: ",
                "</ul>"
            ]
        },
        {
            "name": "Fallback",
            "title": "Requesting financial advisor with fallback",
            "description": [               
            ]
        },
        {
            "name": "WhatNext",
            "title": "Great work!  You're done!",
            "description": [

            ]
        }

    ]
}
