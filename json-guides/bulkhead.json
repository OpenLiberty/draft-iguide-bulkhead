{
    "name": "Bulkhead",
    "title": "Bulkhead",
    "description": "Learn how to use the MicroProfile Bulkhead policy to prevent cascading failures.",
    "duration": "25 minutes",
    "audience": "developer",
    "repo": "https://github.com/OpenLiberty/draft-iguide-bulkhead",
    "steps": [
        {
            "name": "Intro",
            "title": "What you'll learn",
            "guide_duration" : "25 minutes",
            "description": [
                "Explore how to prevent a failure from bringing down the entire system. <a href='https://microprofile.io/' target='_blank'>MicroProfile</a> makes this easy to do with its <a href='https://github.com/eclipse/microprofile-fault-tolerance' target='_blank'>Fault Tolerance feature</a>'s Bulkhead policy.",
                "You'll start with a simple online banking microservice and see the shortcomings of single-threaded programs. You'll then implement concurrency to scale your microservice, and see how it fails when no fault tolerance is implemented. Next, you'll enable the MicroProfile Fault Tolerance feature and use the Bulkhead policy to prevent the failing method from taking down the whole application. You'll explore the two approaches to Bulkhead, semaphore isolation and thread pool isolation, and the parameters used for the annotation. Finally, you'll add a fallback class which will be invoked if the BulkheadException is thrown."
            ],
            "sections" : [
                {
                    "name": "backgroundConcepts",
                    "title": "Background concepts",
                    "description": [
                        "We are using MicroProfile <b>Bulkhead</b>, <b>Asynchronous</b>, and <b>Fallback</b> policies for our implementation.",
                        "<h4>Bulkhead</h4>",
                        "The term <b>bulkhead</b> comes from the structure used in ships to create partitions in the hull. In the event of a hull breach, these isolated partitions prevent water from filling up the entire hull and sinking the ship.",
                        "The bulkhead pattern in software systems works similarly by isolating services to prevent them from starving the system of resources. There are two approaches to bulkhead: semaphore isolation and thread pool isolation.",
                        "The <b>semaphore</b> isolation approach limits the number of concurrent requests to the service. It rejects requests immediately once the limit is hit.",
                        "The <b>thread pool</b> isolation approach utilizes a thread pool to separate the service from the caller and contain it to a subset of system resources. This approach also provides a waiting queue, rejecting requests only when both the pool and queue are full. Thread pool management adds some overhead which reduces performance slightly compared to using a semaphore, but allows hanging threads to timeout.",
                        "<h4>Asynchronous</h4>",
                        "Asynchronous programming allows multiple tasks to run simultaneously, rather than waiting for a task to finish before executing the next. This is usually achieved by running tasks on separate threads.",
                        "<h4>Fallback</h4>",
                        "A fallback service runs when the main service fails. It can provide graceful failure or continued or partial operation of the original service."
                    ]
                }
            ]
        },
        {
            "name": "ExampleScenario",
            "title": "Example: Bank Scenario",
            "description": [
                "Imagine that you're developing a VirtualFinancialAdvisor (VFA) microservice for a bank to allow an online chat with a virtual financial advisor. The initial naive synchronous implementation of the microservice allows only one customer to chat with a financial advisor at a time. As you progress through the guide, you will see how the number of available chat sessions impacts the service and the system."
            ],
            "sections": [
                {
                    "name": "FinancialAdvisor",
                    "title": "Request virtual financial advisor",
                    "description": [
                        "Begin by requesting an online chat with a virtual financial advisor."
                    ],
                    "instruction": [
                        "Click <action title='Customer1 requests chat' onclick=\"bulkheadCallBack.clickChat(event, 'FinancialAdvisor', 1)\"><b>Customer1 requests chat</b></action> to open a chat session with a virtual financial advisor.",
                        "Currently, the microservice allows only one active chat session. The next chat session request fails while the Customer1 chat is still active.<br>Click <action title='Customer2 requests chat' onclick=\"bulkheadCallBack.clickChat(event, 'FinancialAdvisor', 2)\"><b>Customer2 requests chat</b></action> to see the failure."
                    ],
                    "content":[
                        {
                            "displayType":"pod",
                            "content": "/guides/draft-iguide-bulkhead/html/virtual-financial-advisor-example-scenario.html"
                        }
                    ]
                }
            ]
        },
        {
            "name": "AsyncWithoutBulkhead",
            "title": "Adding Java Concurrency with Future and Executors",
            "description": [
                "The initial synchronous implementation of the VirtualFinancialAdvisor microservice allows only a single virtual financial advisor chat session at a time. Implementing Java concurrency using <code>Future</code> and <code>Executors</code> removes the single chat limitation and allows multiple chat sessions to be available at the same time.",
                "A <code>Future</code> is a special return type used in Java Concurrency to fetch the result of a task when it is available. The <code>Executors</code> class provides convenient factory methods for creating executor services, which handle running tasks asynchronously.",
                "Let us start by adding <code>Future</code> and <code>Executors</code> to the code."
            ],
            "instruction": [
                "Replace the <code>return serviceforVFA(counterForVFA);</code> on line 12 to the following block of code, or click <br><action title='Adding Java Concurrency' onclick=\"bulkheadCallBack.addJavaConcurrencyButton(event, 'AsyncWithoutBulkhead')\"><b>ExecutorService executor = Executors.newFixedThreadPool(1);\nFuture serviceRequest = executor.submit(<span title='Lambda Expression'>() -> {\n  try{\n    return serviceForVFA(counterForVFA);\n  } catch {Exception ex} {\n    handleException();\n  }\n  return null;\n}</span>);</b></action>.<br>Then, click <action title='Run' onclick=\"bulkheadCallBack.saveButtonEditorButton(event, 'AsyncWithoutBulkhead')\"><b>Run</b></action> on the editor menu pane.",
                "Click <action title='Customer1 requests chat' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncWithoutBulkhead', 1)\"><b>Customer1 requests chat</b></action> to open a chat session with a virtual financial advisor.",
                "While Customer1 is still chatting with a financial advisor, click <action title='Customer2 requests chat' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncWithoutBulkhead', 2)\"><b>Customer2 requests chat</b></action> to open a separate chat session with a virtual financial advisor.",
                "As more customers request chat sessions with a virtual financial advisor, more sessions become busy.  Currently, the code does not implement a limit to the number of available advisor sessions. The VirtualFinancialAdvisor microservice causes the system to slowly runs out of CPU or memory resources and affect other microservices. <br>Click <action title='50 customer chat requests' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncWithoutBulkhead', 3)\"><b>50 customer chat requests</b></action> to see the cascading failure."
            ],
            "content":[
                {
                    "displayType": "tabbedEditor",
                    "editorList": [
                        {
                            "displayType":"fileEditor",
                            "fileName": "BankService.java",
                            "preload": [
                                "package io.openliberty.guides.bulkhead.global.eBank.microservices;",
                                "import java.util.concurrent.Future;",
                                "import java.util.concurrent.Executors;",
                                "import java.util.concurrent.ExecutorService;",
                                "",
                                "public class BankService {",
                                "",
                                "  private int counterForVFA = 0;",
                                "",
                                "  public Service requestForVFA() {",
                                "    counterForVFA++;",
                                "    return serviceForVFA(counterForVFA);",
                                "  }",
                                "",
                                "  private Service serviceForVFA(int counterForVFA) {",
                                "    Service chatService = new ChatSession(counterForVFA);",
                                "    return chatService;",
                                "  }",
                                "}"
                            ],
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "11"
                                },
                                {
                                    "from": "13",
                                    "to": "19"
                                }
                            ],
                            "save": false,
                            "callback": "(function test(editor) {bulkheadCallBack.listenToEditorForJavaConcurrency(editor); })"
                        }
                    ]
                },
                {
                    "displayType": "pod"
                }
            ]
        },
        {
            "name": "AddLibertyMPFaultTolerance",
            "title": "Enabling MicroProfile Fault Tolerance",
            "description": [
                "Microprofile fault tolerance is a way for microservices to handle the unavailability of a service by using different policies to guide the execution and result of some logic.  The MicroProfile Fault Tolerance 1.0 feature provides an environment to support resilient microservices through patterns that include bulkheads.  Enable the MicroProfile Fault Tolerance 1.0 feature in the <code>server.xml</code> of the Liberty server where the VirtualFinancialAdvisor microservice runs."
            ],
            "instruction": [
              "Add the following element declaration inside the featureManager element to the <code>server.xml</code> file, or click <action title='Enable MicroProfile Fault Tolerance' onclick=\"bulkheadCallBack.addMicroProfileFaultToleranceFeatureButton(event)\"><b>&lt;feature>mpFaultTolerance-1.0&lt;/feature&gt;</b></action>. Then, click <action title='Save' onclick=\"bulkheadCallBack.saveServerXMLButton(event)\"><b>Save</b></action> on the editor menu pane."
            ],
            "content": [
              {
                "displayType": "fileEditor",
                "fileName": "server.xml",
                "preload": [
                  "<?xml version=\"1.0\"?>",
                  "<server description=\"Sample Liberty server\">",
                  "   <featureManager>",
                  "      <feature>cdi-1.2</feature>",
                  "   </featureManager>",
                  "   <httpEndpoint host=\"*\" id=\"defaultHttpEndpoint\" httpsPort=\"${default.https.port}\" httpPort=\"{default.http.port}\"/>",
                  "</server>"
                ],
                "save": true,
                "readonly": [
                    {
                        "from": "1",
                        "to": "3"
                    },
                    {
                        "from": "5",
                        "to": "7"
                    }
                ],
                "callback": "(function test(editor) {bulkheadCallBack.listenToEditorForFeatureInServerXML(editor); })"
              }
            ]
        } ,
        {
            "name": "BulkheadAnnotation",
            "title": "Adding the @Bulkhead annotation",
            "description": [
                "Now that you have seen how our application can easily fail when overloaded, let's fix that by applying a Bulkhead policy to limit the number of concurrent chat requests to the service.  This will limit the amount of system resources that service invocations can use and prevent the rest of the system from failing.",
                "With a Bulkhead policy, the microservice runs on the current thread.  The number of concurrent threads that invoke the service is limited and managed by a semaphore. When this maximum number of concurrent chat requests is reached, any subsequent requests immediately fail with a <code>BulkheadException</code>.",
                "The <code>@Bulkhead</code> annotation has one parameter which specifies the maximum number of concurrent requests to the service. If the parameter is not specified, the default is <code>10</code> requests.",
                "After you modify your <code>server.xml</code> file to <a href='#enabling-microprofile-fault-tolerance'> include the fault tolerance feature</a>, add a Bulkhead policy to the VirtualFinancialAdvisor microservice."
            ],
            "instruction": [
                "Add the <code>@Bulkhead</code> annotation with a value of <code>50</code> on line 22, before the <code>serviceForVFA</code> method, or click <action title='Add @Bulkhead' onclick=\"bulkheadCallBack.addBulkheadButton(event, 'BulkheadAnnotation')\">@Bulkhead(50)</action>. This limits the number of concurrent chat requests to 50. Then, click <action title='Run' onclick=\"bulkheadCallBack.saveButtonEditorButton(event, 'BulkheadAnnotation')\"><b>Run</b></action> on the editor menu pane.",
                "Click <action title='Customer1 request chat' onclick=\"bulkheadCallBack.clickChat(event, 'BulkheadAnnotation', 1)\"><b>Customer1 request chat</b></action> to open a chat session with a virtual financial advisor.",
                "As more customers request chat sessions with a virtual financial advisor, all 50 sessions become busy. Once the maximum number of concurrent chat requests is reached, the next chat request is rejected.<br>Click <action title='50 customer chat requests' onclick=\"bulkheadCallBack.clickChat(event, 'BulkheadAnnotation', 2)\"><b>50 customer chat requests</b></action> to fill the <b>IN PROGRESS</b> chats and see how an additional chat session fails to open for the last customer.<b>"
            ],
            "content": [
                {
                    "displayType": "tabbedEditor",
                    "editorList": [
                        {
                            "displayType": "tabbedEditor",
                            "fileName": "BankService.java",
                            "preload": [
                                "package global.eBank.microservices;",
                                "import java.util.concurrent.Future;",
                                "import java.util.concurrent.Executors;",
                                "import java.util.concurrent.ExecutorService;",
                                "",
                                "public class BankService {",
                                "",
                                "  private int counterForVFA = 0;",
                                "",
                                "  public Service requestForVFA() {",
                                "    counterForVFA++;",
                                "    ExecutorService executor = Executors.newFixedThreadPool(1);",
                                "    Future serviceRequest = executor.submit(() -> {",
                                "      try {",
                                "        return serviceForVFA(counterForVFA);",
                                "      } catch {Exception ex} {",
                                "        handleException();",
                                "      }",
                                "      return null;",
                                "    });",
                                "  }",
                                "",
                                "  public Service serviceForVFA(int counterForVFA) {",
                                "    Service chatService = new ChatSession(counterForVFA);",
                                "    return chatService;",
                                "  }",
                                "}"
                            ],
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "21"
                                },
                                {
                                    "from": "23",
                                    "to": "27"
                                }
                            ],
                            "save": false,
                            "callback": "(function test(tabbedEditor) {bulkheadCallBack.listenToEditorForJavaConcurrency(tabbedEditor, 'BankService.java'); })"
                        }
                    ]
                },
                {
                    "displayType": "pod"
                }
            ]
        },
        {
            "name": "AsyncBulkheadAnnotation",
            "title": "Adding the @Asynchronous annotation with @Bulkhead",
            "description": [
                "Using the <code>@Bulkhead</code> annotation limits the number of concurrent financial advisor chat requests. After the maximum limit of concurrent chat requests to the VirtualFinancialAdvisor microservice is reached, the next chat request fails. Adding the <code>@Asynchronous</code> annotation eases this problem by allowing additional chat requests to be placed in a waiting queue.",
                "When the <code>@Bulkhead</code> annotation is used with the <code>@Asynchronous</code> annotation, access to the microservice is managed by a thread pool. This allows you to configure the maximum concurrent requests along with a waiting queue size. When a request for a financial advisor cannot be added to the waiting queue, a <code>BulkheadException</code> is thrown.",
                "To use the <code>@Bulkhead</code> and <code>@Asynchronous</code> annotations together, you must modify your <code>server.xml</code> file to <a href='#enabling-microprofile-fault-tolerance'>include the fault tolerance feature</a>. Then, configure the <code>@Bulkhead</code> annotation with the following parameters:",
                "<ul><li><b>value</b>: The maximum number of concurrent requests to the service. If the parameter is not specified, the default is <code>10</code> requests.</li><li><b>waitingTaskQueue</b>: The size of the waiting queue which holds requests that will execute at a different time. If the parameter is not specified, the default is <code>10</code> requests. This parameter for the <code>@Bulkhead</code> annotation only takes effect when the <code>@Asynchronous</code> annotation is used.</li></ul>It is best practice to have a <b>waitingTaskQueue</b> equal to or larger than the <b>value</b>."
            ],
            "instruction": [               
                "The method annotated with <code>@Asynchronous</code> must return a <code>Future</code>. To add the <code>@Asynchronous</code> annotation, update the <code>@Bulkhead</code> annotation's parameters and change the return type for <code>serviceForVFA</code>, replace the code from line 24 to 28 with the following block of code, or click <br><action title='Bulkhead annotation with Asynchronous' onclick=\"bulkheadCallBack.addAsyncBulkheadButton(event, 'AsyncBulkheadAnnotation')\"><b>@Asynchronous\n@Bulkhead(value = 50, waitingTaskQueue = 50)\npublic Future&ltService&gt serviceForVFA( int counterForVFA ) {\n  Service chatService = new ChatSession( counterForVFA );\n  return CompletableFuture.completedFuture( chatService );\n}</b></action>.<br>Because <code>@Asynchronous</code> manages thread pools for us, we no longer need to use <code>Executors</code>. Replace the method <code>requestForVFA</code> on line 11 with the following block of code, or click <br><action title='update requestForVFA method' onclick=\"bulkheadCallBack.updateAsyncBulkheadMethodButton(event, 'AsyncBulkheadAnnotation')\"><b>public Future&ltService&gt requestForVFA() {\n  counterForVFA++;\n  return serviceForVFA(counterForVFA);\n}</b></action>.<br>Then, click <action title='Run' onclick=\"bulkheadCallBack.saveButtonEditorButton(event, 'AsyncBulkheadAnnotation')\"><b>Run</b></action> on the editor menu pane.",
                "Click <action title='Customer1 requests chat' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncBulkheadAnnotation', 1)\"><b>Customer1 requests chat</b></action> to open a chat session with a virtual financial advisor.",
                "As more customers request chat sessions with a virtual financial advisor, all 50 sessions become busy. Once the maximum number of concurrent chat requests is reached, the next chat request is placed in the waiting queue.<br>Click <action title='50 customer chat requests' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncBulkheadAnnotation', 2)\"><b>50 customer chat requests</b></action> to fill the <b>IN PROGRESS</b> chats and to see that the last customer is placed in the waiting queue.",
                "As more customers request chat sessions with a virtual financial advisor, the waiting queue eventually fills up. Our Bulkhead policy limits the maximum number of requests in the waiting queue to 50. The next chat request cannot be started and cannot be added to the waiting queue.<br>Click <action title='50 customer chat requests' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncBulkheadAnnotation', 3)\"><b>50 customer chat requests</b></action> to fill the <b>WAITING</b> queue and see how an additional chat session fails to open for the last customer"
            ],
            "content":[
                {
                    "displayType":"tabbedEditor",
                    "activeTab": "BankService.java",
                    "editorList": [
                        {
                            "displayType":"fileEditor",
                            "fileName": "BankService.java",
                            "preload": [
                                "package io.openliberty.guides.bulkhead.global.eBank.microservices;",
                                "import java.util.concurrent.Future;",
                                "import org.eclipse.microprofile.faulttolerance.Asynchronous;",
                                "import org.eclipse.microprofile.faulttolerance.Bulkhead;",
                                "import java.util.concurrent.CompletableFuture;",
                                "",
                                "public class BankService {",
                                "",
                                "  private int counterForVFA = 0;",
                                "",
                                "  public Service requestForVFA() {",
                                "    counterForVFA++;",
                                "    ExecutorService executor = Executors.newFixedThreadPool(1);",
                                "    Future serviceRequest = executor.submit(() -> {",
                                "      try {",
                                "        return serviceForVFA(counterForVFA);",
                                "      } catch {Exception ex} {",
                                "        handleException();",
                                "      }",
                                "      return null;",
                                "    });",
                                "  }",
                                "",
                                "  @Bulkhead(50)",
                                "  public Service serviceForVFA(int counterForVFA) {",
                                "    Service chatService = new ChatSession(counterForVFA);",
                                "    return chatService;",
                                "  }",
                                "}",
                                ""
                            ],
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "10"
                                },
                                {
                                    "from": "29",
                                    "to": "30"
                                }
                            ],
                            "save": false,
                            "callback": "(function test(editor) {bulkheadCallBack.listenToEditorForAsyncBulkhead(editor); })"
                        }
                    ]
                },
                {
                    "displayType": "pod"
                }
            ]
        },
        {   "name": "playground",
            "title": "Interactive bulkhead and asynchronous playground",
            "description": [
              "Now that you learned about bulkheads and asynchronous threads, you can explore the parameters in the <code>@Bulkhead</code> annotation and see the asynchronous bulkhead in action.",
              "You learned about the following parameters:",
              "<ul>",
              "<li><b>value</b>:  The maximum number of concurrent requests to the service. The default is <code>10</code> requests.",
              "<li><b>waitingTaskQueue</b>: The size of the waiting queue which holds requests that will execute at a different time. The default is <code>10</code> requests.",
              "</ul>",
              "It is best practice to have a <b>waitingTaskQueue</b> equal to or larger than the <b>value</b>."
            ],
            "instruction": [
              "<b>Modify</b> the parameters for the <code>@Bulkhead</code> annotation in the following file. For simulation purposes, the maximum value for <b>value</b> and <b>waitingTaskQueue</b> that we can accept is 10.  Repeat the process as many times as you want. <br><br>Click <b>Chat request</b> to initiate a request with a virtual financial advisor or <b>End chat</b> to end an arbitrary chat and observe the simulation."
            ],
            "content":[
              {
                "displayType": "tabbedEditor",
                "editorList": [
                    {
                        "displayType":"fileEditor",
                        "fileName": "BankService.java",
                        "preload": [
                            "package io.openliberty.guides.bulkhead.global.eBank.microservices;",
                            "import java.util.concurrent.Future;",
                            "import org.eclipse.microprofile.faulttolerance.Asynchronous;",
                            "import org.eclipse.microprofile.faulttolerance.Bulkhead;",
                            "import java.util.concurrent.CompletableFuture;",
                            "",
                            "public class BankService {",
                            "",
                            "  private int counterForVFA = 0;",
                            "",
                            "  public Future<Service> requestForVFA() {",
                            "    counterForVFA++;",
                            "    return serviceForVFA(counterForVFA);",
                            "  }",
                            "",
                            "  @Asynchronous",
                            "  @Bulkhead(value=5,",
                            "            waitingTaskQueue=5)",
                            "  public Future<Service> serviceForVFA(int counterForVFA) {",
                            "    Service chatService = new ChatSession(counterForVFA);",
                            "    return CompletableFuture.completedFuture(chatService);",
                            "  }",
                            "}"
                        ],
                        "readonly": [
                            {
                                "from": "1",
                                "to": "16"
                            },
                            {
                                "from": "19",
                                "to": "23"
                            }
                        ],
                        "save": false,
                        "callback": "(function test(editor) {bulkheadCallBack.listenToPlaygroundEditorAnnotationChanges(editor); })"
                    }
                ]
              },
              {
                  "displayType":"pod",
                  "content": "/guides/draft-iguide-bulkhead/html/async-bulkhead-playground.html",
                  "callback": "(function(pod) {bulkheadCallBack.createAsyncBulkhead(pod, 'playground');})"
              }
            ]
        },
        {
            "name": "Fallback",
            "title": "Adding the @Fallback annotation",
            "description": [
                "Using the <code>@Asynchronous</code> and <code>@Bulkhead</code> annotations together places requests for a financial advisor in a waiting queue after the number of requests exceeds the specified maximum number of concurrent requests. If the waiting queue is full, a <code>BulkheadException</code> is thrown. Let's add a fallback service to handle the exception. A fallback service runs when the main service fails. It can provide graceful failure or continued or partial operation of the original service.",
                "The <code>@Fallback</code> annotation identifies a class or <a href='https://openliberty.io/guides/circuit-breaker.html#adding-the-fallback-annotation' target='_blank'>a method</a> that automatically runs when a <code>BulkheadException</code> occurs. To use the <code>@Fallback</code> annotation you must modify your <code>server.xml</code> file to <a href='#enabling-microprofile-fault-tolerance'>include the fault tolerance feature</a>. In our scenario, we add the <code>ServiceFallbackHandler.class</code> which implements the <code>FallbackHandler.class</code> to allow scheduling of an appointment. When a customer makes a request for a chat session that cannot be handled because the maximum limit of concurrent requests has been reached and the wait queue is full, the <code>ServiceFallbackHandler.handle</code> method is called. The return type of both methods, <code>ServiceFallbackHandler.handle</code> and <code>BankService.serviceForVFA</code>, must be of type <code>Future&ltService&gt</code>. Otherwise a <code>FaultToleranceDefinitionException</code> is thrown."
            ],
            "instruction": [
                "In <code>BankService.java</code> add the <code>@Fallback(ServiceFallbackHandler.class)</code> annotation on line 16, or click <action title='Async Bulkhead annotation with Fallback' onclick=\"bulkheadCallBack.addFallbackAsyncBulkheadButton(event, 'Fallback')\"><b>@Fallback(ServiceFallbackHandler.class)</b></action>.<br>Then, click <action title='Run' onclick=\"bulkheadCallBack.saveButtonEditorButton(event, 'Fallback')\"><b>Run</b></action> on the editor menu pane.",
                "Click <action title='Customer1 requests chat' onclick=\"bulkheadCallBack.clickChat(event, 'Fallback', 1)\"><b>Customer1 requests chat</b></action> to open a chat session with a virtual financial advisor.",
                "As more customers request chat sessions with a virtual financial advisor, all 50 sessions become busy. Once the maximum number of concurrent chat requests is reached, the next chat request is placed in the waiting queue.<br>Click <action title='50 customer chat requests' onclick=\"bulkheadCallBack.clickChat(event, 'Fallback', 2)\"><b>50 customer chat requests</b></action> to fill the <b>IN PROGRESS</b> chats and place the last customer in the waiting queue.",
                "As more customers request chat sessions with a virtual financial advisor, the waiting queue eventually fills up. Our Bulkhead policy limits the maximum number of requests in the waiting queue to 50. The next chat request cannot be started and cannot be added to the waiting queue. The fallback service will run to handle the next request.<br>Click <action title='50 customer chat requests' onclick=\"bulkheadCallBack.clickChat(event, 'Fallback', 3)\"><b>50 customer chat requests</b></action> to fill the <b>WAITING</b> queue and see the fallback service ask the last customer to schedule an appointment."
            ],
            "content":[
                {
                    "displayType":"tabbedEditor",
                    "activeTab": "BankService.java",
                    "editorList": [
                        {
                            "displayType":"fileEditor",
                            "fileName": "ServiceFallbackHandler.java",
                            "preload": [
                                "package io.openliberty.guides.bulkhead.global.eBank.microservices;",
                                "import org.eclipse.microprofile.faulttolerance.ExecutionContext;",
                                "import org.eclipse.microprofile.faulttolerance.FallbackHandler;",
                                "import java.util.concurrent.Future;",
                                "",
                                "public class ServiceFallbackHandler implements FallbackHandler<Future<Service>> {",
                                "",
                                "  @Override",
                                "  public Future<Service> handle(ExecutionContext context) {",
                                "    return handleFallback(context);",
                                "  }",
                                "}"
                            ],
                            "readonly": true,
                            "save": false
                        },
                        {
                            "displayType":"fileEditor",
                            "fileName": "BankService.java",
                            "preload": [
                                "package io.openliberty.guides.bulkhead;",
                                "import java.util.concurrent.Future;",
                                "import org.eclipse.microprofile.faulttolerance.Asynchronous;",
                                "import org.eclipse.microprofile.faulttolerance.Bulkhead;",
                                "import org.eclipse.microprofile.faulttolerance.Fallback;",
                                "import java.util.concurrent.CompletableFuture;",
                                "",
                                "public class BankService {",
                                "",
                                "  private int counterForVFA = 0;",
                                "",
                                "  public Future<Service> requestForVFA() {",
                                "    counterForVFA++;",
                                "    return serviceForVFA(counterForVFA);",
                                "  }",
                                "",
                                "  @Asynchronous",
                                "  @Bulkhead(value = 50,",
                                "            waitingTaskQueue = 50)",
                                "  public Future<Service> serviceForVFA(int counterForVFA) {",
                                "    Service chatService = new ChatSession(counterForVFA);",
                                "    return CompletableFuture.completedFuture(chatService);",
                                "  }",
                                "}"
                            ],
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "15"
                                },
                                {
                                    "from": "17",
                                    "to": "24"
                                }
                            ],
                            "save": false,
                            "callback": "(function test(editor) {bulkheadCallBack.listenToEditorForAsyncBulkheadFallback(editor); })"
                        }
                    ]
                },
                {
                    "displayType": "pod"
                }
            ]
        },
        {
            "name": "WhatNext",
            "title": "Great work!  You're done!",
            "description": [
               "You learned about the benefits of asynchronous processing.  But also how a faulty process could potentially build up a large number of requests which, if not limited, could consume all resources (CPU, threads, memory) in the host and lead to a cascading failure.  You learned that a bulkhead isolation policy could be used to limit the number of parallel executions so that the impact of a failing process is isolated from affecting the whole system.  You learned about the two approaches to bulkhead, semaphore isolation and thread pool isolation, and how to identify a fallback service to run when the number of concurrent processes as defined by the bulkhead policy has been reached.",
               "<p> <a >Download the sample aynchronous bulkhead application on github</a>.</p>"
            ]
        }

    ]
}
