{
    "name": "Bulkhead",
    "title": "Bulkhead",
    "description": "Learn how to use the MicroProfile Bulkhead policy to prevent cascading failures.",
    "duration": "25 minutes",
    "audience": "developer",
    "repo": "https://github.com/OpenLiberty/draft-iguide-bulkhead",
    "steps": [
        {
            "name": "Intro",
            "title": "What you'll learn",
            "guide_duration" : "25 minutes",
            "description": [
                "Explore how to prevent a single failure from bringing down the entire system. MicroProfile makes this easy to do with its Fault Tolerance feature's Bulkhead policy.<br>",
                "You'll start with a simple online banking microservice and see the shortcomings of single-threaded programs. You'll then implement concurrency to scale your microservice, and see how it fails when no fault tolerance is implemented. Next, you'll enable the MicroProfile Fault Tolerance feature and use the Bulkhead policy to prevent the failing method from taking down the whole application. You will explore the two approaches to Bulkhead, semaphore isolation and thread pool isolation, and the parameters used for the annotation. Finally, you will add a fallback class which will be invoked if the BulkheadException is thrown."
            ],
            "sections" : [
                {
                    "name": "backgroundConcepts",
                    "title": "Background concepts",
                    "description": [
                        "We will use some concepts from Java Concurrency along with MicroProfile <b>Bulkhead</b> and <b>Asynchronous</b> policies.<br>",
                        "<h4>Futures and Executors</h4>",
                        "A <code>Future</code> is a special return type used in Java Concurrency that is used to fetch the result of a task when it is available.<br>",
                        "The <code>Executors</code> class provides convenient factory methods for creating executor services, which handle running tasks asynchronously.",
                        "<h4>Bulkhead</h4>",
                        "The term <b>bulkhead</b> comes from the structure used in ships to create partitions. In the event of a hull breach, these partitions can be sealed off to prevent the rest of the ship from getting damaged.<br>",
                        "The bulkhead pattern in software systems works similarly by isolating failures to prevent the rest of the system from failing. There are two approaches to bulkhead: sempahore isolation and thread pool isolation.<br>",
                        "With semaphore isolation, requests will fail upon exceeding the maximum concurrent requests. In thread pool isolation, extra requests are added to a waiting queue until currently running requests finish and free up space in the thread pool.",
                        "<h4>Asynchronous</h4>",
                        "Asynchronous programming allows multiple tasks to run simultaneously, rather than waiting for a task to finish before executing the next. This is usually achieved by running tasks on separate threads."
                    ]
                }
            ]
        },
        {
            "name": "ExampleScenario",
            "title": "Example: Bank Scenario",
            "description": [
                "Imagine that you're developing a VirtualFinancialAdvisor (VFA) microservice for a bank to allow an online chat with a virtual financial advisor. The initial implementation of the microservice allows only one customer to chat with a financial advisor at a time. As you progress through the guide, you will see how the number of available chat sessions impacts the service and the system."
            ],
            "content": [],
            "sections": [
                {
                    "name": "FinancialAdvisor",
                    "title": "Request financial advsior",
                    "description": [
                        "Begin by requesting an online chat with a virtual financial advisor."
                    ],
                    "instruction": [
                        "Click <action title='Customer 1 request chat' onclick=\"bulkheadCallBack.clickChat(event, 'FinancialAdvisor')\"><b>Customer 1 request chat</b></action> to open a chat session with a virtual financial advisor.<br>",
                        "Currently, the microservice allows only one active chat session. The next chat session request fails while the Customer 1 chat is still active.<br>Click <action title='Customer 2 request chat' onclick=\"bulkheadCallBack.clickChat(event, 'FinancialAdvisor')\"><b>Customer 2 request chat</b></action> to see the failure to open a chat session.<br>"
                    ],
                    "content":[
                        {
                            "displayType":"pod",
                            "content": "/guides/draft-iguide-bulkhead/html/virtual-financial-advisor-example-scenario.html"
                        }
                    ]
                }
            ]            
        },
        {
            "name": "AsyncWithoutBulkhead",
            "title": "Adding Java Concurrency with Future and Executors",
            "description": [
                "The initial implementation of the VirtualFinancialAdvisor microservice allows only a single virtual financial advisor chat session at a time. Implementing Java concurrency using <a href='#background-concepts'>Future and Executors</a> removes the single chat limitation and allows multiple chat sessions to be available at the same time.",
                "<br>Let us start by adding Future and Executors to the code."
            ],
            "instruction": [
                "Change the <code>return serviceforVFA(counterForVFA);</code> on line 12 to the following block of code, or click <br><action title='Adding Java Concurrency' onclick=\"bulkheadCallBack.addJavaConcurrencyButton(event, 'AsyncWithoutBulkhead')\"><b>ExecutorService executor = Executors.newFixedThreadPool(1);\nFuture serviceRequest = executor.submit(() -> {\n  try{\n    return serviceForVFA(counterForVFA);\n  } catch {Exception ex} {\n    handleBulkheadException();\n  }\n  return null;\n});</b></action>.<br>Then, click <action title='Run' onclick=\"bulkheadCallBack.saveButtonEditorButton(event, 'AsyncWithoutBulkhead')\"><b>Run</b></action> on the editor menu pane.",
                "Click <action title='Customer 1 request chat' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncWithoutBulkhead')\"><b>Customer 1 request chat</b></action> to open a chat session with a virtual financial advisor.<br>",
                "While Customer 1 is still chatting with a financial advisor, click <action title='Customer 2 request chat' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncWithoutBulkhead')\"><b>Customer 2 request chat</b></action> to open a separate chat session with a virtual financial advisor.<br>",
                "Assume 97 more customers request chat sessions with a virtual financial advisor and all the sessions are still active.  Currently the code does not implement a limit to the number of available advisor sessions. The system slowly runs out of CPU or memory resources causing it to overload.<br>Click <action title='Customer 100 request chat' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncWithoutBulkhead')\"><b>Customer 100 request chat</b></action> to see the failure to open an additional chat session.<br>"
            ],
            "content":[
                {
                    "displayType": "tabbedEditor",
                    "editorList": [
                        {
                            "displayType":"fileEditor",
                            "fileName": "BankService.java",
                            "preload": [
                                "package io.openliberty.guides.bulkhead.global.eBank.microservices;",
                                "import java.util.concurrent.Future;",
                                "import java.util.concurrent.Executors;",
                                "import java.util.concurrent.ExecutorService;",
                                "",
                                "private int counterForVFA = 0;",
                                "",
                                "public class BankService {",
                                "",
                                "  public Service requestForVFA() {",
                                "    counterForVFA++;",
                                "    return serviceForVFA(counterForVFA);",
                                "  }",
                                "",
                                "  private Service serviceForVFA(int counterForVFA) {",
                                "    Service chatService = new ChatSession(counterForVFA);",
                                "    return chatService;",
                                "  }",
                                "}"
                            ],
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "11"
                                },
                                {
                                    "from": "13",
                                    "to": "19"
                                }
                            ],
                            "save": false,
                            "callback": "(function test(editor) {bulkheadCallBack.listenToEditorForJavaConcurrency(editor); })"
                        }
                    ]
                },
                {
                    "displayType": "pod"
                }
            ]
        },
        {
            "name": "AddLibertyMPFaultTolerance",
            "title": "Enabling MicroProfile Fault Tolerance",
            "description": [
                "Microprofile fault tolerance is a way for microservices to handle the unavailability of a service by using different policies to guide the execution and result of some logic.  The MicroProfile Fault Tolerance 1.0 feature provides an environment to support resilient microservices through patterns that include bulkheads.  Enable the MicroProfile Fault Tolerance 1.0 feature in the <code>server.xml</code> of the Liberty server where the VirtualFinancialAdvisor microservice runs."
            ],
            "instruction": [
              "Add the following element declaration inside the featureManager element to the <code>server.xml</code> file, or click <action title='Enable MicroProfile Fault Tolerance' onclick=\"bulkheadCallBack.addMicroProfileFaultToleranceFeatureButton(event)\"><b>&lt;feature>mpFaultTolerance-1.0&lt;/feature&gt;</b></action>. Then, click <action title='Save' onclick=\"bulkheadCallBack.saveServerXMLButton(event)\"><b>Save</b></action> on the editor menu pane."
            ],
            "content": [
              {
                "displayType": "fileEditor",
                "fileName": "server.xml",
                "preload": [
                  "<?xml version=\"1.0\"?>",
                  "<server description=\"Sample Liberty server\">",
                  "   <featureManager>",
                  "      <feature>cdi-1.2</feature>",
                  "   </featureManager>",
                  "   <httpEndpoint host=\"*\" id=\"defaultHttpEndpoint\" httpsPort=\"${default.https.port}\" httpPort=\"{default.http.port}\"/>",
                  "</server>"
                ],
                "save": true,
                "readonly": [
                    {
                        "from": "1",
                        "to": "3"
                    },
                    {
                        "from": "5",
                        "to": "7"
                    }
                ],
                "callback": "(function test(editor) {bulkheadCallBack.listenToEditorForFeatureInServerXML(editor); })"
              }
            ]
        } ,
        {
            "name": "BulkheadAnnotation",
            "title": "Adding the @Bulkhead annotation",
            "description": [ 
                "Now that you have seen how our application can easily fail when overloaded, let's fix that by applying a Bulkhead policy to limit the number of concurrent chat requests to the service.  This will limit the amount of system resources that service invocations can use and prevent the rest of the system from failing.",
                "",
                "With a Bulkhead policy, the microservice runs on the current thread.  The number of concurrent threads that invoke the service is limited and managed by a semaphore. When this maximum number of concurrent chat requests is reached, any subsequent requests immediately fail with a <code>BulkheadException</code>.<br>", 
                "The <code>@Bulkhead</code> annotation uses the following parameter:",
                "<br><ul><li><b>value</b>: The maximum number of concurrent requests to the service. This parameter is optional. If the parameter is not specified, the default is <code>10</code> requests."
            ],
            "instruction": [
                "Add <code>@Bulkhead</code> with a value of <code>50</code> on line 22, before the <code>serviceForVFA</code> method, or click <action title='Add @Bulkhead' onclick=\"bulkheadCallBack.addBulkheadButton(event, 'BulkheadAnnotation')\">@Bulkhead(50)</action>. This limits the number of concurrent chat requests to 50. Then, click <action title='Run' onclick=\"bulkheadCallBack.saveButtonEditorButton(event, 'BulkheadAnnotation')\"><b>Run</b></action> on the editor menu pane.",
                "Click <action title='Customer 1 request chat' onclick=\"bulkheadCallBack.clickChat(event, 'BulkheadAnnotation')\"><b>Customer 1 request chat</b></action> to open a chat session with a virtual financial advisor.<br>",
                "Assume 49 more customers request chat sessions with a virtual financial advisor and all 50 sessions are still active. Once the maximum number of concurrent chat requests is reached, the next chat request is rejected.<br>Click <action title='Customer 51 request chat' onclick=\"bulkheadCallBack.clickChat(event, 'BulkheadAnnotation')\"><b>Customer 51 request chat</b></action> to see the failure to open an additional chat session.<br>"
            ],
            "content": [
                {
                    "displayType": "tabbedEditor",
                    "editorList": [
                        {
                            "displayType": "tabbedEditor",
                            "fileName": "BankService.java",
                            "preload": [
                                "package global.eBank.microservices;",
                                "import java.util.concurrent.Future;",
                                "import java.util.concurrent.Executors;",
                                "import java.util.concurrent.ExecutorService;",
                                "",
                                "private int counterForVFA = 0;",
                                "",
                                "public class BankService {",
                                "",
                                "  public Service requestForVFA() {",
                                "    counterForVFA++;",
                                "    ExecutorService executor = Executors.newFixedThreadPool(1);",
                                "    Future serviceRequest = executor.submit(() -> {",
                                "      try {",
                                "        return serviceForVFA(counterForVFA);",
                                "      } catch {Exception ex} {",
                                "        handleBulkheadException();",
                                "      }",
                                "      return null;",
                                "    });",
                                "  }",
                                "",
                                "  public Service serviceForVFA(int counterForVFA) {",
                                "    Service chatService = new ChatSession(counterForVFA)",
                                "    return chatService;",
                                "  }",
                                "}"
                            ],
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "21"
                                },
                                {
                                    "from": "23",
                                    "to": "27"
                                }
                            ],
                            "save": false,
                            "callback": "(function test(tabbedEditor) {bulkheadCallBack.listenToEditorForJavaConcurrency(tabbedEditor, 'BankService.java'); })"
                        }
                    ]
                },
                {
                    "displayType": "pod"
                }   
            ]
        },
        {
            "name": "AsyncBulkheadAnnotation",
            "title": "Adding the @Asynchronous annotation with @Bulkhead",
            "description": [ 
                "Using the <code>@Bulkhead</code> annotation limits the number of concurrent financial advisor chat requests. After the maximum limit of concurrent chat requests to the VirtualFinancialAdvisor microservice is reached, the next chat request fails. Adding the <code>@Asynchronous</code> annotation eases this problem by allowing additional chat requests to be placed in a waiting queue.<br>",
                "When the <code>@Bulkhead</code> annotation is used with the <code>@Asynchronous</code> annotation, access to the microservice is managed by a thread pool. This allows you to configure the maximum concurrent requests along with a waiting queue size. When a request for a financial advisor cannot be added to the waiting queue, a <code>BulkheadException</code> is thrown.<br>",
                "Configure the waiting queue size using the following parameter:<br>",
                "<ul><li><b>waitingTaskQueue</b>: The size of the waiting queue which holds requests that will execute at a different time. This parameter is optional. If the parameter is not specified, the default is <code>10</code> requests. This parameter for the @Bulkhead annotation only takes effect when <code>@Asynchronous</code> annotation is used.</il></ul><br>"         
            ],
            "instruction": [
                "Change the <code>@Bulkhead(50)</code> annotation on line 9 to the following code, or click <br><action title='Bulkhead annotation with Asynchronous' onclick=\"bulkheadCallBack.addAsyncBulkheadButton(event, 'AsyncBulkheadAnnotation')\"><b>@Asynchronous\n@Bulkhead(value = 50, waitingTaskQueue = 50)</b></action>.<br>The method annotated with <code>@Asynchronous</code> must return a Future. Change the method return type on line 12 to the following code, or click <br><action title='Bulkhead return type method' onclick=\"bulkheadCallBack.addMethodFutureReturnTypeButton(event, 'AsyncBulkheadAnnotation')\"><b>public Future&ltService&gt serviceForVFA(int counterForVFA) {</b></action>.<br>Change the return type on line 14 to the following code, or click<br><action title='Bulkhead return type' onclick=\"bulkheadCallBack.addReturnTypeButton(event, 'AsyncBulkheadAnnotation')\"><b>return CompletableFuture.completedFuture(chatService);</b></action>.<br>Change the method <code>requestForVFA</code> on line 17 to the following block of code, or click <br><action title='update requestForVFA method' onclick=\"bulkheadCallBack.updateAsyncBulkheadMethodButton(event, 'AsyncBulkheadAnnotation')\"><b>public Future&ltService&gt requestForVFA() {\n  counterForVFA++;\n  return serviceForVFA(counterForVFA);\n}</b></action>.<br>Then, click <action title='Run' onclick=\"bulkheadCallBack.saveButtonEditorButton(event, 'AsyncBulkheadAnnotation')\"><b>Run</b></action> on the editor menu pane.",
                "Click <action title='Customer 1 request chat' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncBulkheadAnnotation')\"><b>Customer 1 request chat</b></action> to open a chat session with a virtual financial advisor.<br>",
                "Assume 49 more customers request chat sessions with a virtual financial advisor and all 50 sessions are still active. Once the maximum number of concurrent chat requests is reached, the next chat request is placed in the waiting queue.<br>Click <action title='Customer 51 request chat' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncBulkheadAnnotation')\"><b>Customer 51 request chat</b></action> to see Customer 51 is placed in the waiting queue.<br>",
                "Assume another 49 customers request chat sessions and now the waiting queue is full. Our Bulkhead policy limits the maximum number of requests in the waiting queue to 50. The next chat request cannot be started and cannot be added to the waiting queue. Click <action title='Customer 101 request chat' onclick=\"bulkheadCallBack.clickChat(event, 'AsyncBulkheadAnnotation')\"><b>Customer 101 request chat</b></action> to see the failure to open an additional chat session.<br>"                
            ],
            "content":[
                {
                    "displayType":"tabbedEditor",
                    "activeTab": "BankService.java",
                    "editorList": [
                        {
                            "displayType":"fileEditor",
                            "fileName": "BankService.java",
                            "preload": [
                                "package io.openliberty.guides.bulkhead.global.eBank.microservices;",
                                "import java.util.concurrent.Future;",
                                "import org.eclipse.microprofile.faulttolerance.Asynchronous;",
                                "import org.eclipse.microprofile.faulttolerance.Bulkhead;",
                                "import java.util.concurrent.CompletableFuture;",
                                "",
                                "public class BankService {",
                                "",
                                "  @Bulkhead(50)",
                                "  public Service serviceForVFA(int counterForVFA) {",
                                "    Service chatService = new ChatSession(counterForVFA)",
                                "    return chatService;",
                                "  }",
                                "",
                                "  public Service requestForVFA() {",
                                "    counterForVFA++;",
                                "    ExecutorService executor = Executors.newFixedThreadPool(1);",
                                "    Future serviceRequest = executor.submit(() -> {",
                                "      try {",
                                "        return serviceForVFA(counterForVFA);",
                                "      } catch {Exception ex} {",
                                "        handleBulkheadException();",
                                "      }",
                                "      return null;",
                                "  });",
                                "}"
                            ],
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "8"
                                },
                                {
                                    "from": "11",
                                    "to": "11"
                                },
                                {
                                    "from": "13",
                                    "to": "14"
                                },
                                {
                                    "from": "26",
                                    "to": "26"
                                }
                            ],
                            "save": false,
                            "callback": "(function test(editor) {bulkheadCallBack.listenToEditorForAsyncBulkhead(editor); })"
                        }
                    ]
                },
                {
                    "displayType": "pod"
                }
            ]
        },
        {   "name": "playground",
            "title": "Interactive bulkhead playground",
            "description": [
                "Now that you learned about MicroProfile Bulkhead and Asynchronous, you can explore the parameters in the <code>@Bulkhead</code> annotation and see the bulkhead in action.",
                "<br>You learned about the following parameters:",
                "<ul>",
                "<li><b>value</b>: ",
                "<li><b>waitingTaskQueue</b>: ",
                "</ul>"
            ]
        },
        {
            "name": "Fallback",
            "title": "Adding the @Fallback annotation",
            "description": [  
                "Using the <code>@Asynchronous</code> and <code>@Bulkhead</code> annotations together places requests for a financial advisor in a waiting queue after the number of requests exceeds the specified maximum number of concurrent requests. If the waiting queue fills, a <code>BulkheadException</code> is thrown. Let's add a fallback service to handle the exception. A fallback service runs when the main service fails. It can provide graceful failure or continued or partial operation of the original service.<br>", 
                "The <code>@Fallback</code> annotation identifies a class that automatically runs when a <code>BulkheadException</code> occurs. In our scenario, we add the <code>ServiceFallbackHandler.class</code> which implements the <code>FallbackHandler.class</code> to allow scheduling of an appointment. When a customer makes a request for a chat session that cannot be handled because the maximum limit of concurrent requests has been reached and the wait queue is full, the <code>ServiceFallbackHandler.handle</code> method is called. The return type of both methods, <code>ServiceFallbackHandler.handle</code> and <code>BankService.serviceForVFA</code>, must be of type <code>Service</code>. Otherwise a <code>FaultToleranceDefinitionException</code> is thrown."
            ],
            "instruction": [
                "In <code>BankService.java</code> add the <code>@Fallback(ServiceFallbackHandler.class)</code> annotation on line 9, or click <action title='Async Bulkhead annotation with Fallback' onclick=\"bulkheadCallBack.addFallbackAsyncBulkheadButton(event, 'Fallback')\"><b>@Fallback(ServiceFallbackHandler.class)</b></action>.<br>Then, click <action title='Run' onclick=\"bulkheadCallBack.saveButtonEditorButton(event, 'Fallback')\"><b>Run</b></action> on the editor menu pane.",
                "Click <action title='Customer 1 request chat' onclick=\"bulkheadCallBack.clickChat(event, 'Fallback')\"><b>Customer 1 request chat</b></action> to open a chat session with a virtual financial advisor.<br>",
                "Assume 49 more customers request chat sessions with a virtual financial advisor and all 50 sessions are still active. Once the maximum number of concurrent chat requests is reached, the next chat request is placed in the waiting queue.<br>Click <action title='Customer 51 request chat' onclick=\"bulkheadCallBack.clickChat(event, 'Fallback')\"><b>Customer 51 request chat</b></action> to see Customer 51 is placed in the waiting queue.<br>",
                "Assume another 49 customers request chat sessions and now the waiting queue is full. Our Bulkhead policy limits the maximum number of requests in the waiting queue to 50. The next chat request cannot be started and cannot be added to the waiting queue. The fallback service will run to handle the next request. Click <action title='Customer 101 request chat' onclick=\"bulkheadCallBack.clickChat(event, 'Fallback')\"><b>Customer 101 request chat</b></action> to see the fallback service offer the customer to schedule an appointment.<br>"
            ],
            "content":[
                {
                    "displayType":"tabbedEditor",
                    "activeTab": "BankService.java",
                    "editorList": [
                        {
                            "displayType":"fileEditor",
                            "fileName": "ServiceFallbackHandler.java",
                            "preload": [
                                "package io.openliberty.guides.bulkhead.global.eBank.microservices;",
                                "import org.eclipse.microprofile.faulttolerance.ExecutionContext;",
                                "import org.eclipse.microprofile.faulttolerance.FallbackHandler;",
                                "",
                                "public class ServiceFallbackHandler implements FallbackHandler<Service> {",
                                "",
                                "  @Override",
                                "  public Service handle(ExecutionContext context) {",
                                "    return handleFallback(context);",
                                "  }",
                                "}"
                            ],
                            "readonly": true,
                            "save": false
                        },
                        {
                            "displayType":"fileEditor",
                            "fileName": "BankService.java",
                            "preload": [
                                "package io.openliberty.guides.bulkhead;",
                                "import java.util.concurrent.Future;",
                                "import org.eclipse.microprofile.faulttolerance.Asynchronous;",
                                "import org.eclipse.microprofile.faulttolerance.Bulkhead;",
                                "import org.eclipse.microprofile.faulttolerance.Fallback;",
                                "import java.util.concurrent.CompletableFuture;",
                                "",
                                "public class BankService {",
                                "",
                                "  @Asynchronous",
                                "  @Bulkhead(value = 50,",
                                "            waitingTaskQueue = 50)",
                                "  public Future<Service> serviceForVFA(int counterForVFA) {",
                                "    Service chatService = new ChatSession(counterForVFA)",
                                "    return CompletableFuture.completedFuture(chatService);",
                                "  }",
                                "",
                                "  public Future<Service> requestForVFA() {",
                                "    counterForVFA++;", 
                                "    return serviceForVFA(counterForVFA);",
                                "  }",
                                "}"
                            ],
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "8"
                                },
                                {
                                    "from": "10",
                                    "to": "22"
                                }
                            ],
                            "save": false,
                            "callback": "(function test(editor) {bulkheadCallBack.listenToEditorForAsyncBulkheadFallback(editor); })"
                        }
                    ]
                },
                {
                    "displayType": "pod"
                }
            ]
        },
        {
            "name": "WhatNext",
            "title": "Great work!  You're done!",
            "description": [

            ]
        }

    ]
}
